#include <vector>
#include <string>
#include <algorithm>
#include <unordered_map>

// Directive to bring all identifiers from the std namespace into the current scope
using namespace std; 

class Solution {
public:
    /**
     * Groups the anagrams from the input array of strings.
     */
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        
        // The map declaration now uses 'string' and 'vector' directly
        unordered_map<string, vector<string>> anagramGroups;
        
        // 1. Iterate and Group
        for (const string& s : strs) {
            
            // Create a copy for the key
            string key = s; 
            
            // Sort the characters to create the canonical key
            // begin() and end() are methods of the string class
            sort(key.begin(), key.end());
            
            // Use the sorted string (key) to look up the list of anagrams 
            // and add the original string (s) to that list.
            anagramGroups[key].push_back(s);
        }
        
        // 2. Prepare the Final Result
        vector<vector<string>> result;
        
        // Iterate over the map's values (the vectors of grouped strings)
        for (auto const& [key, group] : anagramGroups) {
            result.push_back(group);
        }
        
        return result;
    }
};
